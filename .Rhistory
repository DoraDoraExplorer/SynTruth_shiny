noisesd = noisesd)
return(gep$gep)
}
get_hrs <- function(gep){
gep$group <- as.factor(gep$group)
gep$group <- relevel(gep$group, ref = "NB0")
coxph <- coxph(Surv(surv_time, status) ~ group,
data = gep)
hrs <- round(exp(coxph$coefficients), 2)
return(hrs)
}
get_best_gep(params = params, n_repeats = 100, threshold = 0.05)
rweibull(10, 1.5, 1)
runApp()
devtools::install_git("https://github.com/DoraDoraExplorer/SynTruth_pkg")
shiny::runApp()
SynTruthPkg::generate_gep_surv
SynTruthPkg::generate_gep_surv()
SynTruthPkg
library(SynTruthPkg)
SynTruthPkg::generate_gep_surv
SynTruthPkg:::generate_gep_surv
SynTruthPkg::generate_gep_surv(data.frame(a = c(1,1), b  = c(2,2), 10, 'Weibull', 1.4, 1, 0.8, 0.6, 0.7))
SynTruthPkg:::generate_gep_surv(data.frame(a = c(1,1), b  = c(2,2), 10, 'Weibull', 1.4, 1, 0.8, 0.6, 0.7))
SynTruthPkg:::generate_gep_surv(data.frame(a = c(1,1), b  = c(2,2)), 10, 'Weibull', 1.4, 1, 0.8, 0.6, 0.7))
SynTruthPkg:::generate_gep_surv(data.frame(a = c(1,1), b = c(2,2)), 10, 'Weibull', 1.4, 1, 0.8, 0.6, 0.7)
SynTruthPkg:::generate_gep_surv(data.frame(a = c(1,1), b = c(2,2)), 2, 'Weibull', 1.4, 1, 0.8, 0.6, 0.7)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_git("https://github.com/DoraDoraExplorer/SynTruth_pkg")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
renv::status()
renv::snapshot()
renv::status()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(SynTruthPkg)
library(SynTruthPkg)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
useShinyjs(),
fluidPage(
# tags$div(class = "jumbotron text-center", style = "margin-bottom:0px;margin-top:0px",
#          tags$h2(class = 'jumbotron-heading', stye = 'margin-bottom:0px;margin-top:0px',
#                  'SynTruth'),
#          p('Synthetic data generator for assessing the performance of algorithms for predicting treatment response')
# ),
titlePanel(
h1("SynTruth", align = 'center')),
h3('Synthetic data generator for assessing the performance of algorithms for predicting treatment response', align = 'center'),
br(),
tags$div(
tags$p("SynTruth generates synthetic datasets of"),
tags$ol(
tags$li('gene expression (marker, M and non-marker, NM genes)'),
tags$li('patient benefit labels (benefit, B or non-benefit, NB)'),
tags$li('treatment (0, 1-treatment of interest)'),
tags$li('survival (time and event indicator)')
),
tags$p("Each patient belongs to one of four groups: benefit and treatment 1 (B1); benefit and treatment 0 (B0); non-benefit and treatment 1 (NB1); non-benefit and treatment 0 (NB0)."),
tags$p("The performance of machine learning algorithms can be assessed by comparing predictions to the ground truth generated by SynTruth."),
),
sidebarLayout(
sidebarPanel(
h1("Gene expression"),
fixedRow(
column(4,
numericInput('n_pts', "Number of patients", 50, min = 10, max = 2000),
numericInput('fraction_censored', "Fraction of censored patients", 0, min = 0, max = 1)
),
column(4,
numericInput('n_genes', HTML("Number of <br/> genes"), 100, min = 50, max = 20000),
numericInput('fraction_pts_benefit', "Fraction of B patients", 0.5, min = 0, max = 1)
),
column(4,
numericInput('fraction_tx_1', "Fraction of treatment1", 0.5, min = 0.2, max = 0.8),
numericInput('noisemean', HTML("Noise <br/> mean"), 0, min = -10,  max = 10),
numericInput('noisesd', HTML("Noise <br/> sd"), 0.2, min = 0,  max = 10)
)
),
fixedRow(
column(8,
h3("M"),
textInput('marker_blocksizes', HTML("Marker blocksize"), "5,10"),
textInput('gene_effects', "Gene effects", "AND,OR"),
br(),
column(4,
h4("NB"),
textInput('mus_NB', "Mu NB", "0,1"),
textInput('sds_NB', "SD NB", "0.4,0.5"),
textInput('rhos_NB', "Correlation NB", "0.8,0.7")
),
column(4,
h4("B"),
textInput('mu_diffs', "Mu diff", "4,2"),
textInput('sds_B', "SD B", "0.4,0.3"),
textInput('rhos_B', "Correlation B", "0.8,0.4"))
),
column(4,
h3('NM'),
numericInput('mu_nonmarker', "Mu NM", 0, min = -5, max = 5),
textInput('sds_nonmarker', "SD NM", "0.4,0.3"),
textInput('rhos_nonmarker', "Correlation NM", "0.8,0.8")
)
),
h1("Survival"),
fixedRow(
column(6,
numericInput('HR_B0_NB0', "HR B0/NB0", 0.7, min = 0.1, max = 10),
numericInput('HR_NB1_NB0', "HR NB1/NB0", 0.9, min = 0, max = 10),
numericInput('HR_B1_NB0', "HR B1/NB0", 0.5, min = 0, max = 10)
),
column(6,
numericInput('scale_NB0', "NB0 scale", 10, min = 0, max = 10),
numericInput('shape', "Weibull distribution shape", 1.4, min = -5, max = 5)
)
),
fluidRow(
actionButton("go", "GO", class = "btn-lg btn-success")
)
),
mainPanel(
br(),
h1("Results"),
br(),
#tableOutput('debug_print'),
uiOutput("download"),
br(),
h1("Survival curves"),
plotOutput("survplot"),
#uiOutput("download_survplot"),
#verbatimTextOutput("survplot_explain")
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
install.packages("reactlog")
reactlog::reactlog_enable()
runApp()
shiny::reactlogShow()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinydashboard")
library(shinydashboard)
?shinydashboard::box
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
?figcaption
??figcaption
tags$figcaption()
?tags$figcaption()
?tags$figcaption
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
ui <- dashboardPage(
dashboardHeader(title = "SynTruth"),
dashboardSidebar(
tags$head(tags$style(HTML('padding-top: 10px;
padding-left: 20px;
display: inline-block;
border-color: transparent'))),
p('Synthetic data generator for assessing the performance of algorithms for predicting treatment response')
),
dashboardBody(
column(6,
box(width = 12, height = '430px', solidHeader = TRUE, status = "primary",
title = "Overview of synthetic gene expression components",
tags$figure(
class = "centerFigure",
tags$img(
src = "overview.png",
width = 500,
alt = "Overview of synthetic gene expression components"
)
)
),
box(width = 12, height = '550px', solidHeader = TRUE, status = "primary",
title = "Survival plot",
plotOutput("survplot"),
br(),
uiOutput("download")
),
),
column(width = 6,
fluidRow(
box(width = 6, solidHeader = TRUE, status = "primary",
title = "Gene expression",
column(6,
numericInput('n_pts', "Number of patients", 50, min = 10, max = 2000)
),
column(6,
numericInput('n_genes', HTML("Number of genes"), 100, min = 50, max = 20000)
),
numericInput('fraction_censored', "Fraction of censored patients", 0, min = 0, max = 1),
numericInput('fraction_pts_benefit', "Fraction of B patients", 0.5, min = 0, max = 1),
numericInput('fraction_tx_1', "Fraction of treatment1", 0.5, min = 0.2, max = 0.8),
column(6,
numericInput('noisemean', HTML("Noise mean"), 0, min = -10,  max = 10)
),
column(6,
numericInput('noisesd', HTML("Noise sd"), 0.2, min = 0,  max = 10)
)
),
box(width = 6, solidHeader = TRUE, status = "primary",
title = "Survival",
br(),
numericInput('HR_B0_NB0', "HR B0/NB0", 0.7, min = 0.1, max = 10),
numericInput('HR_NB1_NB0', "HR NB1/NB0", 0.9, min = 0, max = 10),
numericInput('HR_B1_NB0', "HR B1/NB0", 0.5, min = 0, max = 10),
numericInput('scale_NB0', "NB0 scale", 10, min = 0, max = 10),
numericInput('shape', "Weibull distribution shape", 1.4, min = -5, max = 5)
)
),
fluidRow(
box(width = 6, solidHeader = TRUE, status = "primary",
title = "Nonmarker bloks",
numericInput('mu_nonmarker', "Mu NM", 0, min = -5, max = 5),
textInput('sds_nonmarker', "SD NM", "0.4,0.3"),
textInput('rhos_nonmarker', "Correlation NM", "0.8,0.8")
),
box(width = 6, solidHeader = TRUE, status = "primary",
title = "Marker blocks",
column(6,
),
textInput('gene_effects', "Gene effects", "AND,OR"),
column(6,
h4('NB'),
textInput('mus_NB', "Mu NB", "0,1"),
textInput('sds_NB', "SD NB", "0.4,0.5"),
textInput('rhos_NB', "Correlation NB", "0.8,0.7"),
),
column(6,
h4('B'),
textInput('mu_diffs', "Mu diff", "4,2"),
textInput('sds_B', "SD B", "0.4,0.3"),
textInput('rhos_B', "Correlation B", "0.8,0.4")
)
),
br(),
actionButton("go", "GO", class = "btn-lg btn-success")
)
)
)
)
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
renv::status()
renv::snapshot()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='doraschuller', token='5183B66D1A0E237DB2BD1E8EAA151F8B', secret='Tz1yeqVquc8urSTeJqRAKO0F08FY1ak98uAsUP53')
library(rsconnect)
rsconnect::deployApp()
shiny::runApp()
library(rsconnect)
rsconnect::deployApp()
library(rsconnect)
rsconnect::deployApp()
library(rsconnect)
rsconnect::deployApp()
devtools::install_git("https://github.com/DoraDoraExplorer/SynTruth_pkg")
renv::snapshot()
library(rsconnect)
rsconnect::deployApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?shinydashboard::box
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
list(c(1,2))
as.list(c(1,2))
runApp()
deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
