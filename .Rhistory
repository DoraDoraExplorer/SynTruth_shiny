renv::init()
install.packages(shiny)
install.packages('shiny')
install.packages("shinyjs")
ui <- fluidPage(
useShinyjs(),
fluidPage(
tags$div(class = "jumbotron text-center", style = "margin-bottom:0px;margin-top:0px",
tags$h2(class = 'jumbotron-heading', stye = 'margin-bottom:0px;margin-top:0px',
'SynTruth'),
p('synthetic data generator for assessing the performance of algorithms forpredicting treatment response'),
)
)
)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
fluidPage(
tags$div(class = "jumbotron text-center", style = "margin-bottom:0px;margin-top:0px",
tags$h2(class = 'jumbotron-heading', stye = 'margin-bottom:0px;margin-top:0px',
'SynTruth'),
p('Synthetic data generator for assessing the performance of algorithms forpredicting treatment response'),
),
sidebarLayout(
siderbarPanel(
fluidRow(
column(6,
h1("Markers"),
numericInput(blocksize_m, "Marker blocksize", 5, min = 1, max = 100),
selectInput(gene_effect, "Gene effect", choices = list("AND" = "AND",
"OR" = "OR",
"none" = "none")),
column(3,
h2("No-benefit"),
numericInput(mus_NB, "Mu NB", 0, min = -5, max = 5),
numericInput(sds_NB, "SDs NB", 0.4, min = 0, max = 1),
numericInput(rhos_NB, "Correlations NB", 0.8, min = 0, max = 1)
),
column(3,
h2("Benefit"),
numericInput(mu_diffs, "Mu difference", 0, min = -5, max = 5),
numericInput(sds_B, "SDs B", 0.4, min = 0, max = 1),
numericInput(rhos_B, "Correlations B", 0.8, min = 0, max = 1))
),
column(3,
h1('Non-markers'),
numericInput(nm_blocksize, "Non-marker blocksize", 50, min = 1, max = 100),
numericInput(mus_NM, "Mu NM", 0, min = -5, max = 5),
numericInput(sds_NM, "SDs NM", 0.4, min = 0, max = 1),
numericInput(rhos_NM, "Correlations NM", 0.8, min = 0, max = 1)
)
)
)
)
)
)
ui <- fluidPage(
useShinyjs(),
fluidPage(
tags$div(class = "jumbotron text-center", style = "margin-bottom:0px;margin-top:0px",
tags$h2(class = 'jumbotron-heading', stye = 'margin-bottom:0px;margin-top:0px',
'SynTruth'),
p('Synthetic data generator for assessing the performance of algorithms forpredicting treatment response'),
),
sidebarLayout(
sidebarPanel(
fluidRow(
column(6,
h1("Markers"),
numericInput(blocksize_m, "Marker blocksize", 5, min = 1, max = 100),
selectInput(gene_effect, "Gene effect", choices = list("AND" = "AND",
"OR" = "OR",
"none" = "none")),
column(3,
h2("No-benefit"),
numericInput(mus_NB, "Mu NB", 0, min = -5, max = 5),
numericInput(sds_NB, "SDs NB", 0.4, min = 0, max = 1),
numericInput(rhos_NB, "Correlations NB", 0.8, min = 0, max = 1)
),
column(3,
h2("Benefit"),
numericInput(mu_diffs, "Mu difference", 0, min = -5, max = 5),
numericInput(sds_B, "SDs B", 0.4, min = 0, max = 1),
numericInput(rhos_B, "Correlations B", 0.8, min = 0, max = 1))
),
column(3,
h1('Non-markers'),
numericInput(nm_blocksize, "Non-marker blocksize", 50, min = 1, max = 100),
numericInput(mus_NM, "Mu NM", 0, min = -5, max = 5),
numericInput(sds_NM, "SDs NM", 0.4, min = 0, max = 1),
numericInput(rhos_NM, "Correlations NM", 0.8, min = 0, max = 1)
)
)
)
)
)
)
ui <- fluidPage(
useShinyjs(),
fluidPage(
tags$div(class = "jumbotron text-center", style = "margin-bottom:0px;margin-top:0px",
tags$h2(class = 'jumbotron-heading', stye = 'margin-bottom:0px;margin-top:0px',
'SynTruth'),
p('Synthetic data generator for assessing the performance of algorithms forpredicting treatment response'),
),
sidebarLayout(
sidebarPanel(
fluidRow(
column(6,
h1("Markers"),
numericInput('blocksize_m', "Marker blocksize", 5, min = 1, max = 100),
selectInput('gene_effect', "Gene effect", choices = list("AND" = "AND",
"OR" = "OR",
"none" = "none")),
column(3,
h2("No-benefit"),
numericInput('mus_NB', "Mu NB", 0, min = -5, max = 5),
numericInput('sds_NB', "SDs NB", 0.4, min = 0, max = 1),
numericInput('rhos_NB', "Correlations NB", 0.8, min = 0, max = 1)
),
column(3,
h2("Benefit"),
numericInput('mu_diffs', "Mu difference", 0, min = -5, max = 5),
numericInput('sds_B', "SDs B", 0.4, min = 0, max = 1),
numericInput('rhos_B', "Correlations B", 0.8, min = 0, max = 1))
),
column(3,
h1('Non-markers'),
numericInput('nm_blocksize', "Non-marker blocksize", 50, min = 1, max = 100),
numericInput('mus_NM', "Mu NM", 0, min = -5, max = 5),
numericInput('sds_NM', "SDs NM", 0.4, min = 0, max = 1),
numericInput('rhos_NM', "Correlations NM", 0.8, min = 0, max = 1)
)
)
)
)
)
)
ui <- fluidPage(
useShinyjs(),
fluidPage(
tags$div(class = "jumbotron text-center", style = "margin-bottom:0px;margin-top:0px",
tags$h2(class = 'jumbotron-heading', stye = 'margin-bottom:0px;margin-top:0px',
'SynTruth'),
p('Synthetic data generator for assessing the performance of algorithms forpredicting treatment response'),
),
sidebarLayout(
sidebarPanel(
fluidRow(
column(6,
h1("Markers"),
numericInput('blocksize_m', "Marker blocksize", 5, min = 1, max = 100),
selectInput('gene_effect', "Gene effect", choices = list("AND" = "AND",
"OR" = "OR",
"none" = "none")),
column(3,
h2("No-benefit"),
numericInput('mus_NB', "Mu NB", 0, min = -5, max = 5),
numericInput('sds_NB', "SDs NB", 0.4, min = 0, max = 1),
numericInput('rhos_NB', "Correlations NB", 0.8, min = 0, max = 1)
),
column(3,
h2("Benefit"),
numericInput('mu_diffs', "Mu difference", 0, min = -5, max = 5),
numericInput('sds_B', "SDs B", 0.4, min = 0, max = 1),
numericInput('rhos_B', "Correlations B", 0.8, min = 0, max = 1))
),
column(3,
h1('Non-markers'),
numericInput('nm_blocksize', "Non-marker blocksize", 50, min = 1, max = 100),
numericInput('mus_NM', "Mu NM", 0, min = -5, max = 5),
numericInput('sds_NM', "SDs NM", 0.4, min = 0, max = 1),
numericInput('rhos_NM', "Correlations NM", 0.8, min = 0, max = 1)
)
)
),
mainPanel(
h1("Main")
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
renv::status()
renv::restore()
?renv::status()
source("R/0classes.R")
source("R/0classes.R")
install.packages("devtools")
renv::snapshot()
devtools::install_git("https://github.com/DoraDoraExplorer/SynTruth_pkg.git")
devtools::install_git("https://github.com/DoraDoraExplorer/SynTruth_pkg")
devtools::install_git("https://github.com/DoraDoraExplorer/SynTruth_pkg")
devtools::install_git("https://github.com/DoraDoraExplorer/SynTruth_pkg")
renv::status()
devtools
install.packages("devtools")
devtools::install_git("https://github.com/DoraDoraExplorer/SynTruth_pkg")
library(shiny)
renv::status()
library(SynTruthPkg)
shiny::runApp()
runApp()
renv::status()
renv::status()
renv::status()
?renv::status()
renv::snapshot()
library(shiny)
library(shinyjs)
library(SynTruthPkg)
renv::status()
renv::status()
renv::status()
shiny::runApp()
renv::status()
renv::snapshot()
library(shiny)
#library(shinyjs)
library(SynTruthPkg)
library(shinyjs)
runApp()
a = "bd"
class(a)
as.vector(a)
devtools::install_git('https://github.com/DoraDoraExplorer/SynTruth_pkg')
devtools::install_git('https://github.com/DoraDoraExplorer/SynTruth_pkg')
devtools::install_git('https://github.com/DoraDoraExplorer/SynTruth_pkg')
SynTruthPkg::generate_data
devtools::install_git('https://github.com/DoraDoraExplorer/SynTruth_pkg', ref = '0.0.1')
library(SynTruthPkg)
SynTruthPkg::generate_data
remove.packages("SynTruthpk")
remove.packages("SynTruthpkg")
devtools::install_git('https://github.com/DoraDoraExplorer/SynTruth_pkg', ref = '0.0.1')
devtools::install_git('https://github.com/DoraDoraExplorer/SynTruth_pkg', ref = '0.0.1')
library(SynTruthPkg)
generate_data
shiny::runApp()
runApp()
runApp()
remove.packages("SynTruthPkg")
devtools::install_git("https://github.com/DoraDoraExplorer/SynTruth_pkg", ref = '0.0.2')
shiny::runApp()
remove.packages('SynTruthPkg')
devtools::install.git(https://github.com/DoraDoraExplorer/SynTruth_pkg)
devtools::install.git('https://github.com/DoraDoraExplorer/SynTruth_pkg')
devtools::install_git('https://github.com/DoraDoraExplorer/SynTruth_pkg')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
